local util = require 'xlua.util'
xlua.private_accessible(CS.BatchDevelopConfirmBoxController)
xlua.private_accessible(CS.StatisticsController)
xlua.private_accessible(CS.DevelopEquipmentController)
xlua.private_accessible(CS.FactoryResourceController)
local myOnClickItem = function(self, item, isAutoBack)
	if item == nil then

	else
		self:OnClickItem(item, isAutoBack);
	end
end
--local myEquipOnClickItem = function(self, item)
	--print("装备点击");
	--if item == nil then
		--print("item null");
	--else
		--print("item not null");
		--self:OnClickItem(item);
	--end
--end
local myOnClickItemNull = function(self, item, isAutoBack)
	
end
local myRequestStartDevelopEquipHandle = function(self, request)
		xlua.hotfix(CS.DevelopController,"OnClickItem",myOnClickItemNull)
		self:RequestStartDevelopEquipHandle(request);
		util.hotfix_ex(CS.DevelopController,"OnClickItem",myOnClickItem)
        --if request.isQuick == 1 then
			--CS.FactoryResourceController.Close();
            --CS.DevelopEquipmentController.Instance:OnClickItem(CS.DevelopEquipmentController.Instance.currentSelectedItem);
        --end
end
local myRequestStartEquipProduceDevelopHandle = function(self, req)
		xlua.hotfix(CS.DevelopController,"OnClickItem",myOnClickItemNull)
		self:RequestStartEquipProduceDevelopHandle(req);
		util.hotfix_ex(CS.DevelopController,"OnClickItem",myOnClickItem)
		--if req.isQuick == 1 then
			--CS.FactoryResourceController.Close();
            --CS.DevelopEquipmentController.Instance:OnClickItem(CS.DevelopEquipmentController.Instance.currentSelectedItem);
        --end
end
util.hotfix_ex(CS.DevelopController,'OnClickItem',myOnClickItem)
--util.hotfix_ex(CS.DevelopEquipmentController,'OnClickItem',myEquipOnClickItem)
util.hotfix_ex(CS.BatchDevelopConfirmBoxController,'RequestStartDevelopEquipHandle',myRequestStartDevelopEquipHandle)
util.hotfix_ex(CS.BatchDevelopConfirmBoxController,'RequestStartEquipProduceDevelopHandle',myRequestStartEquipProduceDevelopHandle)